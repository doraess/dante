// Generated by CoffeeScript 1.7.1
var address, addressFailure, checkConfig, config, debug, disableWs, enableWs, fetchWeather, forecast, forecastFailure, icons, locationError, locationOptions, locationSuccess, sendPebbleData, sendSuccess, socket, stocks, stocksFailure, tidyString,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

config = {};

debug = ['WS', 'FORECAST', 'INFO'];

forecast = {};

address = {};

stocks = {};

socket = null;

icons = {
  'clear-day': {
    'icon': 0,
    'font': 'B'
  },
  'clear-night': {
    'icon': 1,
    'font': 'C'
  },
  'rain': {
    'icon': 2,
    'font': 'R'
  },
  'snow': {
    'icon': 3,
    'font': 'W'
  },
  'sleet': {
    'icon': 4,
    'font': 'X'
  },
  'wind': {
    'icon': 5,
    'font': 'F'
  },
  'fog': {
    'icon': 6,
    'font': 'M'
  },
  'cloudy': {
    'icon': 7,
    'font': 'N'
  },
  'partly-cloudy-day': {
    'icon': 8,
    'font': 'H'
  },
  'partly-cloudy-night': {
    'icon': 9,
    'font': 'I'
  },
  'no-weather': {
    'icon': 10,
    'font': ')'
  }
};

String.prototype.stripAccents = function() {
  var translate, translate_re;
  translate_re = /[àáâãäçèéêëìíîïñòóôõöùúûüýÿÀÁÂÃÄÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝ]/g;
  translate = "aaaaaceeeeiiiinooooouuuuyyAAAAACEEEEIIIINOOOOOUUUUY";
  return this.replace(translate_re, function(match) {
    return translate.substr(translate_re.source.indexOf(match) - 1, 1);
  });
};

tidyString = function(str) {
  str = str.replace(/Calle de los /, "C. ");
  str = str.replace(/Calle de las /, "C. ");
  str = str.replace(/Calle de la /, "C. ");
  str = str.replace(/Calle del /, "C. ");
  str = str.replace(/Calle de /, "C. ");
  str = str.replace(/Calle /, "C. ");
  str = str.replace(/Avenida de los /, "Av. ");
  str = str.replace(/Avenida de las /, "Av. ");
  str = str.replace(/Avenida de la /, "Av. ");
  str = str.replace(/Avenida del /, "Av. ");
  str = str.replace(/Avenida de /, "Av. ");
  str = str.replace(/Avenida/, "Av. ");
  str = str.replace(/Paseo de los /, "P. ");
  str = str.replace(/Paseo de las /, "P. ");
  str = str.replace(/Paseo de la /, "P. ");
  str = str.replace(/Paseo del /, "P. ");
  str = str.replace(/Paseo de /, "P. ");
  str = str.replace(/Paseo /, "P. ");
  str = str.replace(/Plaza de los /, "Pz. ");
  str = str.replace(/Plaza de las /, "Pz. ");
  str = str.replace(/Plaza de la /, "Pz. ");
  str = str.replace(/Plaza del /, "Pz. ");
  str = str.replace(/Plaza de /, "Pz. ");
  return str = str.replace(/Plaza /, "Pz. ");
};

enableWs = function() {
  if (!socket) {
    socket = new WebSocket('ws://doraess.no-ip.org:3900/pebble');
    if (__indexOf.call(debug, 'WS') >= 0) {
      console.log(("----> Habilitando websocket..." + socket.readyState).yellow);
    }
    socket.addEventListener("open", function() {
      if (__indexOf.call(debug, 'WS') >= 0) {
        console.log(("----> Websocket abierto..." + socket.readyState).green);
      }
      socket.send("Pebble conectado");
      Pebble.showSimpleNotificationOnPebble("Websocket", "Conectado con Galáctica");
      config.ws_enabled = true;
      return Pebble.sendAppMessage({
        websocket: true
      });
    });
    socket.addEventListener("message", function(event) {
      return console.log(JSON.stringify(event.data));
    });
    socket.addEventListener("close", function() {
      if (__indexOf.call(debug, 'WS') >= 0) {
        console.log("----> Websocket cerrado.".green);
      }
      return config.ws_enabled = false;
    });
    return socket.addEventListener("error", function(error) {
      if (__indexOf.call(debug, 'WS') >= 0) {
        ("----> Error en Websocket..." + error).green;
      }
      return config.ws_enabled = false;
    });
  } else {
    if (__indexOf.call(debug, 'WS') >= 0) {
      return console.log(("----> Socket ya abierto..." + socket.readyState).yellow);
    }
  }
};

disableWs = function() {
  if (socket && socket.readyState === socket.OPEN) {
    if (__indexOf.call(debug, 'WS') >= 0) {
      console.log(("----> Deshabilitando websocket..." + socket.readyState).yellow);
    }
    socket.close();
    socket = null;
    Pebble.sendAppMessage({
      websocket: false
    });
  } else {
    if (__indexOf.call(debug, 'WS') >= 0) {
      console.log("----> Socket ya cerrado.".yellow);
    }
  }
  return config.ws_enabled = false;
};

checkConfig = function(config, callback) {
  var key, value;
  for (key in config) {
    value = config[key];
    if (value === void 0 || "") {
      Pebble.showSimpleNotificationOnPebble("Error de configuración", "Falta el valor de " + key + ", por favor abra la ventana de configuración e introduzca el valor correspondiente");
      break;
    }
  }
  return callback();
};

sendPebbleData = function(data) {
  var doraess, doraess_url, emoncms, emoncms_url;
  emoncms = new XMLHttpRequest();
  emoncms.timeout = 15000;
  emoncms_url = "http://emoncms.org/input/post.json?json=" + (JSON.stringify(data)) + "&apikey=" + config.emoncms_api_key;
  emoncms.open("GET", encodeURI(emoncms_url, false));
  emoncms.onreadystatechange = function() {
    if (emoncms.readyState === 4 && emoncms.status === 200) {
      if (__indexOf.call(debug, 'EMONCMS') >= 0) {
        return console.log(emoncms.responseText);
      }
    }
  };
  if (__indexOf.call(debug, 'EMONCMS') >= 0) {
    console.log("----> Enviando request a emoncms ... ".yellow + emoncms_url.green);
  }
  emoncms.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
  emoncms.send();
  doraess = new XMLHttpRequest();
  doraess.timeout = 15000;
  doraess_url = "http://doraess.no-ip.org:3330/input/post.json?json=" + (JSON.stringify(data)) + "&apikey=77c3bf24f69e048cd6b2ee11321432cf";
  doraess.open("GET", encodeURI(doraess_url, false));
  doraess.onreadystatechange = function() {
    if (doraess.readyState === 4 && doraess.status === 200) {
      if (__indexOf.call(debug, 'EMONCMS') >= 0) {
        return console.log(doraess.responseText);
      }
    }
  };
  if (__indexOf.call(debug, 'EMONCMS') >= 0) {
    console.log("----> Enviando request a doraess ... ".yellow + doraess_url.green);
  }
  doraess.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
  return doraess.send();
};

fetchWeather = function(latitude, longitude) {
  var data, location, location_url, stock, stock_url, weather, weather_url;
  checkConfig(config, function() {
    if (__indexOf.call(debug, 'FORECAST') >= 0) {
      return console.log("----> Usando configuración ... \n".green + render(config, void 0, 10));
    }
  });
  data = {};
  weather = new XMLHttpRequest();
  weather.timeout = 15000;
  weather_url = "https://api.forecast.io/forecast/" + config.forecast_api_key + "/" + latitude + "," + longitude + "?units=auto&exclude=hourly,alerts";
  weather.open("GET", weather_url, true);
  weather.onreadystatechange = function() {
    var response;
    if (weather.readyState === 4 && weather.status === 200) {
      response = JSON.parse(weather.responseText);
      if (response) {
        forecast = response;
        Pebble.sendAppMessage(data = {
          icon: icons[response.currently.icon].font,
          temperature: Math.round(response.currently.temperature) + "° " + Math.round(response.currently.humidity * 100) + "%",
          clouds: " " + Math.round(response.currently.cloudCover * 100) + "% ",
          rain_prob: Math.round(response.currently.precipProbability * 100) >= 1 ? " " + Math.round(response.currently.precipProbability * 100) + "% " : "",
          rain: Math.ceil(response.currently.precipIntensity * 2.54) >= 1 ? " " + Math.ceil(response.currently.precipIntensity * 2.54) + "cm" : "",
          moon: parseInt(response.daily.data[0].moonPhase * 100)
        }, sendSuccess, forecastFailure);
        if (__indexOf.call(debug, 'FORECAST') >= 0) {
          return console.log("----> Sincronizando datos: \n".green + render(data, void 0, 10));
        }
      } else {
        if (__indexOf.call(debug, 'FORECAST') >= 0) {
          return console.log("----> Error en la respuesta de forecast.io".red);
        }
      }
    }
  };
  weather.ontimeout = function() {
    if (__indexOf.call(debug, 'FORECAST') >= 0) {
      console.log("----> Timeout en la solicitud a forecast.io".red);
    }
    forecast.icon = ')';
    forecast.temperature = 'Error';
    forecast.clouds = '';
    forecast.rain_prob = '';
    forecast.rain = '';
    Pebble.sendAppMessage(forecast, sendSuccess, forecastFailure);
    return fetchWeather(latitude, longitude);
  };
  if (__indexOf.call(debug, 'FORECAST') >= 0) {
    console.log("----> Enviando request a forecast.io ... ".yellow + weather_url.green);
  }
  weather.send();
  location = new XMLHttpRequest();
  location.timeout = 15000;
  location_url = "http://maps.googleapis.com/maps/api/geocode/json?latlng=" + latitude + "," + longitude + "&sensor=true";
  location.open("GET", location_url, true);
  location.onreadystatechange = function() {
    var component, response, _i, _len, _ref;
    if (location.readyState === 4 && location.status === 200) {
      response = JSON.parse(location.responseText);
      if (response) {
        _ref = response.results[0].address_components;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          component = _ref[_i];
          if (__indexOf.call(component.types, 'street_number') >= 0) {
            address.number = parseInt(component.long_name);
          }
          if (__indexOf.call(component.types, 'route') >= 0) {
            address.street = tidyString(component.long_name.toString('utf-8')) + [address.number ? ", " + address.number : void 0];
          }
          if (__indexOf.call(component.types, 'locality') >= 0) {
            address.city = component.long_name;
          }
        }
        Pebble.sendAppMessage(address, sendSuccess, addressFailure);
        if (__indexOf.call(debug, 'FORECAST') >= 0) {
          return console.log("----> Sincronizando datos: \n".green + render(address, void 0, 10));
        }
      } else {
        if (__indexOf.call(debug, 'FORECAST') >= 0) {
          return console.log("----> Error en la respuesta de google".red);
        }
      }
    }
  };
  location.ontimeout = function() {
    address.city = 'Error';
    address.street = 'Timeout en la solicitud';
    if (__indexOf.call(debug, 'FORECAST') >= 0) {
      console.log("----> Timeout en la solicitud a google".red);
    }
    return Pebble.sendAppMessage(address, sendSuccess, addressFailure);
  };
  if (__indexOf.call(debug, 'FORECAST') >= 0) {
    console.log("----> Enviando request a google ... ".yellow + location_url.green);
  }
  location.send();
  stock = new XMLHttpRequest();
  stock.timeout = 15000;
  stock_url = "http://es.finance.yahoo.com/q?s=" + config.stock_symbol;
  stock.open("GET", stock_url, true);
  stock.onreadystatechange = function() {
    var percent, updown, value;
    if (stock.readyState === 4 && stock.status === 200) {
      value = /yfs_l84_[a-z.]*\">([0-9,]*)/i.exec(this.response);
      percent = /yfs_p43_[a-z.]*\">\(([0-9,]*)/i.exec(this.response);
      updown = /class=\"([_upgdownr]*) time_rtq_content\"/i.exec(this.response);
      if (value && percent && updown) {
        stocks.stocks = config.stock_symbol + ': ' + value[1] + '€ (' + [updown[1] === 'up_g' ? '+' : '-'] + percent[1] + '%)';
      }
      if (__indexOf.call(debug, 'FORECAST') >= 0) {
        console.log("----> Sincronizando datos: \n".green + render(stocks, void 0, 10));
      }
      return Pebble.sendAppMessage(stocks, sendSuccess, stocksFailure);
    }
  };
  stock.ontimeout = function() {
    if (__indexOf.call(debug, 'FORECAST') >= 0) {
      return console.log("----> Timeout en la solicitud a yahoo finance".red);
    }
  };
  if (__indexOf.call(debug, 'FORECAST') >= 0) {
    console.log("----> Enviando request a yahoo finance ... ".yellow + stock_url.green);
  }
  return stock.send();
};

addressFailure = function(e) {
  if (__indexOf.call(debug, 'SYNC') >= 0) {
    console.log("----> Error en la sincronización: \n".red + render(e, void 0, 10));
  }
  return Pebble.sendAppMessage(address, sendSuccess, addressFailure);
};

stocksFailure = function(e) {
  if (__indexOf.call(debug, 'SYNC') >= 0) {
    console.log("----> Error en la sincronización: \n".red + render(e, void 0, 10));
  }
  return Pebble.sendAppMessage(stocks, sendSuccess, stocksFailure);
};

forecastFailure = function(e) {
  if (__indexOf.call(debug, 'SYNC') >= 0) {
    console.log("----> Error en la sincronización: \n".red + render(e, void 0, 10));
  }
  return Pebble.sendAppMessage(forecast, sendSuccess, forecastFailure);
};

sendSuccess = function() {
  if (__indexOf.call(debug, 'SYNC') >= 0) {
    return console.log("----> Datos sincronizados".green);
  }
};

locationSuccess = function(pos) {
  var coordinates;
  coordinates = pos.coords;
  return fetchWeather(coordinates.latitude, coordinates.longitude);
};

locationError = function(err) {
  console.warn("location error (" + err.code + "): " + err.message);
  return Pebble.sendAppMessage({
    city: "Loc Unavailable",
    temperature: "N/A"
  });
};

locationOptions = {
  timeout: 15000,
  maximumAge: 60000,
  enableHighAccuracy: true
};

Pebble.addEventListener("ready", function(e) {
  var json;
  console.log("----> La aplicación está lista: ".green + Pebble.getAccountToken().green);
  console.log("----> Plataforma: \n".green + render(navigator, void 0, 10));
  if (__indexOf.call(debug, 'INFO') >= 0) {
    console.log("----> Document: \n".green + render(document, void 0, 10));
  }
  if (config.ws_enabled) {
    enableWs();
  }
  json = window.localStorage.getItem('config');
  if (typeof json === 'string') {
    config = JSON.parse(json);
    checkConfig(config, function() {
      if (__indexOf.call(debug, 'INFO') >= 0) {
        return console.log("----> Cargando datos de configuracion...\n".green + render(config, void 0, 10));
      }
    });
  }
  if (__indexOf.call(debug, 'INFO') >= 0) {
    return console.log("---->Pebble Account Token: ".green + Pebble.getAccountToken().yellow);
  }
});

document.addEventListener("devicemotion", function(ev) {
  var accel;
  accel = ev.accelerationIncludingGravity;
  return console.log(accel.x, accel.y, accel.z);
}, false);

Pebble.addEventListener("appmessage", function(e) {
  if (__indexOf.call(debug, 'FORECAST') >= 0) {
    console.log(JSON.stringify(e.payload));
  }
  if (e.payload.command) {
    if (__indexOf.call(debug, 'FORECAST') >= 0) {
      console.log("----> Solicitud de actualización".green);
    }
    navigator.geolocation.getCurrentPosition(locationSuccess, locationError, locationOptions);
  }
  if (e.payload.pebble_battery) {
    if (__indexOf.call(debug, 'FORECAST') >= 0) {
      console.log("----> Envío de datos del Pebble ...\n".green + render(e.payload, void 0, 10));
    }
    if (forecast.currently) {
      sendPebbleData({
        pebble_battery: e.payload.pebble_battery,
        pebble_temperature: forecast.currently.temperature,
        pebble_humidity: parseInt(forecast.currently.humidity * 100)
      });
    } else {
      sendPebbleData({
        pebble_battery: e.payload.pebble_battery
      });
    }
  }
  if (e.payload.websocket) {
    return enableWs();
  } else {
    return disableWs();
  }
});

Pebble.addEventListener("webviewclosed", function(e) {
  if (e.response) {
    config = JSON.parse(e.response);
    if (__indexOf.call(debug, 'INFO') >= 0) {
      console.log("----> Opciones: \n".green + render(config, void 0, 10));
    }
    if (__indexOf.call(debug, 'INFO') >= 0) {
      console.log("----> Webview cerrada.".yellow);
    }
    navigator.geolocation.getCurrentPosition(locationSuccess, locationError, locationOptions);
    window.localStorage.setItem('config', e.response);
    if (config.ws_enabled === true) {
      return enableWs();
    } else {
      return disableWs();
    }
  }
});

Pebble.addEventListener("showConfiguration", function(e) {
  var uri;
  uri = "http://doraess.github.io/pebble/dante/?" + ("forecast_api_key=" + (encodeURIComponent(config.forecast_api_key))) + ("&emoncms_api_key=" + (encodeURIComponent(config.emoncms_api_key))) + ("&stock_symbol=" + (encodeURIComponent(config.stock_symbol))) + ("&ws_enabled=" + (encodeURIComponent(config.ws_enabled))) + ("&interval=" + (encodeURIComponent(30)));
  if (__indexOf.call(debug, 'INFO') >= 0) {
    console.log("----> Abriendo configuración ... ".yellow + uri.green);
  }
  return Pebble.openURL(uri);
});
